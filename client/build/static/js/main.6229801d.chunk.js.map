{"version":3,"sources":["components/display-quote.tsx","components/create-quote.tsx","components/get-quote-detail.tsx","components/get-quote-list.tsx","components/update-quote.tsx","components/delete-quote.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DisplayQuote","quote","style","minHeight","_id","title","CreateQuote","useState","_v","setQuote","handleSubmit","a","fetch","method","headers","body","JSON","stringify","result","json","message","data","notification","success","labelCol","span","wrapperCol","onFinish","values","onFinishFailed","_","error","Item","color","label","name","rules","required","type","htmlType","marginTop","paddingBottom","layout","GetQuoteDetail","listOfId","setListOfId","id","useEffect","list","map","x","getListOfID","length","index","key","GetQuoteList","setList","console","log","onClick","UpdateQuote","getListOfQuotes","useCallback","errorInfo","DeleteQuote","handleDelete","danger","event","App","className","CodepenCircleFilled","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"gVAMaA,EAA0B,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,MACtC,OACI,yBAAKC,MAAO,CAAEC,UAAW,QACrB,kCAAQF,EAAMG,KACd,qCAAWH,EAAMI,SCLhBC,EAAkB,WAAO,IAAD,EACPC,mBAAgB,CACtCH,IAAK,OACLC,MAAO,QACPG,GAAI,IAJyB,mBAC1BP,EAD0B,KACnBQ,EADmB,KAY3BC,EAAY,uCAAG,qCAAAC,EAAA,6DAASN,EAAT,EAASA,MAAT,SACIO,MAAM,iBAAkB,CACzCC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACjBZ,MAAOA,MALE,cACXa,EADW,gBAQmCA,EAAOC,OAR1C,gBAQTC,EARS,EAQTA,QAASC,EARA,EAQAA,KACjBC,IAAaC,QAAQ,CAAEH,YAEvBX,EAASY,GAXQ,4CAAH,sDAuBlB,OACI,oCACI,6DAEA,kBAAC,IAAD,iBAhCO,CACXG,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,KA8BhB,CAEIE,SAhBK,SAACC,GAAiB,IACvBvB,EAAUuB,EAAVvB,MACRK,EAAa,CAAEL,WAePwB,eAZW,SAACC,GACpBR,IAAaS,MAAM,CACfX,QAAS,mDAYL,kBAAC,IAAKY,KAAN,CACI9B,MAAO,CAAE+B,MAAO,oBAChBC,MAAM,cACNC,KAAK,QACLC,MAAO,CACH,CACIC,UAAU,EACVjB,QAAS,kCAIjB,kBAAC,IAAD,OAEJ,kBAAC,IAAD,CAAQkB,KAAK,UAAUC,SAAS,UAAhC,WAIJ,kBAAC,IAAD,MACA,yBACIrC,MAAO,CACHC,UAAW,MACXqC,UAAW,OACXC,cAAe,SAGnB,kDAEA,kBAAC,EAAD,CAAcxC,MAAOA,O,SCxE/ByC,EAAS,CACXlB,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,KAEXkB,EAAqB,WAAO,IAAD,EACJpC,mBAAmB,IADf,mBAC7BqC,EAD6B,KACnBC,EADmB,OAEVtC,mBAAgB,CACtCH,IAAK,OACLC,MAAO,QACPG,GAAI,IAL4B,mBAE7BP,EAF6B,KAEtBQ,EAFsB,KAO9BC,EAAY,uCAAG,qCAAAC,EAAA,6DAASmC,EAAT,EAASA,GAAT,kBAEQlC,MAAM,WAAakC,EAAI,CACxCjC,OAAQ,MACRC,QAAS,CAAE,eAAgB,sBAJlB,cAEPI,EAFO,gBAMuCA,EAAOC,OAN9C,gBAMLC,EANK,EAMLA,QAASC,EANJ,EAMIA,KACjBC,IAAaC,QAAQ,CAAEH,YACvBX,EAASY,GARI,kDAUbC,IAAaS,MAAM,CAAEX,QAAS,KAAIA,UAVrB,0DAAH,sDAqClB,OAZA2B,qBAAU,YACW,uCAAG,kCAAApC,EAAA,sEACKC,MAAM,UAAW,CAClCC,OAAQ,MACRC,QAAS,CAAE,eAAgB,sBAHf,cACVI,EADU,gBAKsCA,EAAOC,OAL7C,kBAKRC,QAASC,EALD,EAKCA,KACX2B,EAAO3B,EAAK4B,KAAI,SAACC,GAAD,OAAOA,EAAE9C,OAC/ByC,EAAYG,GAPI,4CAAH,qDASjBG,KACD,IAEC,oCACI,iFACA,kBAAC,IAAD,iBACQT,EADR,CAEIf,SA5BK,SAACC,GAAiB,IACvBkB,EAAOlB,EAAPkB,GACRpC,EAAa,CAAEoC,QA2BPjB,eAxBW,SAACC,GACpBR,IAAaS,MAAM,CACfX,QAAS,gDAwBL,kBAAC,IAAKY,KAAN,CACI9B,MAAO,CAAE+B,MAAO,oBAChBC,MAAM,cACNC,KAAK,KACLC,MAAO,CACH,CACIC,UAAU,EACVjB,QAAS,+BAIjB,kBAAC,IAAD,OAEJ,kBAAC,IAAD,CAAQkB,KAAK,UAAUC,SAAS,UAAhC,WAIJ,kBAAC,IAAD,MACA,kDACA,kBAAC,EAAD,CAActC,MAAOA,IACrB,iEACA,kBAAC,IAAD,MACA,yBACIC,MAAO,CACHC,UAAW,MACXqC,UAAW,OACXC,cAAe,SAGnB,6BACyB,IAApBG,EAASQ,OACN,2EAEA,kBAAC,IAAD,KACKR,EAASK,KAAI,SAACH,EAAYO,GACvB,OACI,kBAAC,IAAKrB,KAAN,CAAWsB,IAAKD,GACZ,kCAAQP,YC5FnCS,EAAmB,WAAO,IAAD,EACVhD,mBAAkB,IADR,mBAC3ByC,EAD2B,KACrBQ,EADqB,KAG5B9C,EAAY,uCAAG,WACjBoB,GADiB,qBAAAnB,EAAA,sEAGIC,MAAM,UAAW,CAClCC,OAAQ,MACRC,QAAS,CAAE,eAAgB,sBALd,cAGXI,EAHW,gBAOqCA,EAAOC,OAP5C,gBAOTC,EAPS,EAOTA,QAASC,EAPA,EAOAA,KACjBoC,QAAQC,IAAIrC,GACZC,IAAaC,QAAQ,CAAEH,YACvBoC,EAAQnC,GAVS,4CAAH,sDAalB,OACI,oCACI,mFACA,kBAAC,IAAD,CAAQiB,KAAK,UAAUqB,QAASjD,GAAhC,YAGA,yBACIR,MAAO,CACHC,UAAW,MACXqC,UAAW,OACXC,cAAe,SAGnB,kDACiB,IAAhBO,EAAKI,OACF,iGAKA,kBAAC,IAAD,KACKJ,EAAKC,KAAI,SAAChD,GACP,OACI,kBAAC,IAAK+B,KAAN,CAAWsB,IAAKrD,EAAMG,KAClB,kBAAC,EAAD,CAAcH,MAAOA,YCxCnDyC,EAAS,CACXlB,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,KAEXmC,EAAkB,WAAO,IAAD,EACTrD,mBAAkB,IADT,mBAC1ByC,EAD0B,KACpBQ,EADoB,KAO3B9C,EAAY,uCAAG,qCAAAC,EAAA,6DACjBmC,EADiB,EACjBA,GACAzC,EAFiB,EAEjBA,MAFiB,kBAQQO,MAAM,WAAakC,EAAI,CACxCjC,OAAQ,MACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACjBZ,MAAOA,MAZF,cAQPa,EARO,gBAeiCA,EAAOC,OAfxC,gBAeLC,EAfK,EAeLA,QACRE,IAAaC,QAAQ,CAAEH,YACvByC,IAjBa,kDAmBbvC,IAAaS,MAAM,CAAEX,QAAS,KAAIA,UAnBrB,0DAAH,sDA6BZyC,EAAkBC,sBAAW,sBAAC,gCAAAnD,EAAA,sEACXC,MAAM,UAAW,CAClCC,OAAQ,MACRC,QAAS,CAAE,eAAgB,sBAHC,cAC1BI,EAD0B,gBAKsBA,EAAOC,OAL7B,kBAKxBC,QAASC,EALe,EAKfA,KACjBmC,EAAQnC,GANwB,2CAOjC,IAMH,OAJA0B,qBAAU,WACNc,MACD,CAACA,IAGA,oCACI,gFACA,iGAIA,kBAAC,IAAD,iBACQnB,EADR,CAEIf,SAvDK,SAACC,GAAiB,IACvBkB,EAAclB,EAAdkB,GAAIzC,EAAUuB,EAAVvB,MACZK,EAAa,CAAEoC,KAAIzC,WAsDXwB,eA7BW,SAACkC,GACpBzC,IAAaS,MAAM,CACfX,QAAS,8CA6BL,kBAAC,IAAKY,KAAN,CACI9B,MAAO,CAAE+B,MAAO,oBAChBC,MAAM,cACNC,KAAK,KACLC,MAAO,CACH,CACIC,UAAU,EACVjB,QAAS,+BAIjB,kBAAC,IAAD,OAEJ,kBAAC,IAAKY,KAAN,CACI9B,MAAO,CAAE+B,MAAO,oBAChBC,MAAM,cACNC,KAAK,QACLC,MAAO,CACH,CACIC,UAAU,EACVjB,QAAS,kCAIjB,kBAAC,IAAD,OAEJ,kBAAC,IAAD,CAAQkB,KAAK,UAAUC,SAAS,UAAhC,WAIJ,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAQoB,QAASE,GAAjB,qBACA,yBACI3D,MAAO,CACHC,UAAW,MACXqC,UAAW,OACXC,cAAe,SAGF,IAAhBO,EAAKI,OACF,iEAEA,kBAAC,IAAD,KACKJ,EAAKC,KAAI,SAAChD,GACP,OACI,kBAAC,IAAK+B,KAAN,CAAWsB,IAAKrD,EAAMG,KAClB,kBAAC,EAAD,CAAcH,MAAOA,YC/G5C+D,EAAkB,WAAO,IAAD,EACTzD,mBAAkB,IADT,mBAC1ByC,EAD0B,KACpBQ,EADoB,KAgB3BS,EAAY,uCAAG,mCAAAtD,EAAA,6DAASmC,EAAT,EAASA,GAAT,kBAEQlC,MAAM,WAAakC,EAAI,CACxCjC,OAAQ,SACRC,QAAS,CAAE,eAAgB,sBAJlB,cAEPI,EAFO,gBAMiCA,EAAOC,OANxC,gBAMLC,EANK,EAMLA,QACRE,IAAaC,QAAQ,CAAEH,YACvByC,IARa,kDAUbvC,IAAaS,MAAM,CAAEX,QAAS,KAAIA,UAVrB,0DAAH,sDAcZyC,EAAkBC,sBAAW,sBAAC,gCAAAnD,EAAA,sEACXC,MAAM,UAAW,CAClCC,OAAQ,MACRC,QAAS,CAAE,eAAgB,sBAHC,cAC1BI,EAD0B,gBAKsBA,EAAOC,OAL7B,kBAKxBC,QAASC,EALe,EAKfA,KACjBmC,EAAQnC,GANwB,2CAOjC,IAMH,OAJA0B,qBAAU,WACNc,MACD,CAACA,IAGA,oCACI,mFAEA,yBACI3D,MAAO,CACHC,UAAW,MACXqC,UAAW,OACXC,cAAe,SAGnB,kDACiB,IAAhBO,EAAKI,OACF,2EAEA,kBAAC,IAAD,KACKJ,EAAKC,KAAI,SAAChD,GACP,OACI,kBAAC,IAAK+B,KAAN,CAAWsB,IAAKrD,EAAMG,KAClB,6BACI,kBAAC,EAAD,CAAcH,MAAOA,IACrB,kBAAC,IAAD,CACIiE,QAAM,EACNP,QAAS,SAACQ,GAAD,OACLF,EAAa,CAAEnB,GAAI7C,EAAMG,QAHjC,oB,kBCwBzBgE,EAhFC,WACZ,OACI,yBAAKC,UAAU,OACX,4BAAQA,UAAU,cACd,6BACA,yBAAKA,UAAU,YACX,kBAACC,EAAA,EAAD,CAAqBpE,MAAO,CAAEqE,SAAU,WAE5C,6BALJ,gBAMiB,6BANjB,aAQI,6BARJ,+BAUI,6BAVJ,6BAcA,yBAAKF,UAAU,cACX,2CACA,kBAAC,IAAD,MACA,0DACA,yEACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMhE,MAAM,UACZ,6BACA,gEACA,4EACA,4FAKJ,6BAEA,0CACA,kBAAC,IAAD,MACA,kBAAC,IAAD,KACI,6CACA,kBAAC,IAAD,MACA,yBAAKgE,UAAU,cACX,kBAAC,EAAD,QAGR,kBAAC,IAAD,MACA,kBAAC,IAAD,KACI,0CACA,kBAAC,IAAD,MACA,yBAAKA,UAAU,cACX,kBAAC,EAAD,QAGR,kBAAC,IAAD,MACA,kBAAC,IAAD,KACI,iDACA,kBAAC,IAAD,MACA,yBAAKA,UAAU,cACX,kBAAC,EAAD,QAGR,kBAAC,IAAD,MACA,kBAAC,IAAD,KACI,4CACA,kBAAC,IAAD,MACA,yBAAKA,UAAU,cACX,kBAAC,EAAD,QAGR,kBAAC,IAAD,MACA,kBAAC,IAAD,KACI,6CACA,kBAAC,IAAD,MACA,yBAAKA,UAAU,cACX,kBAAC,EAAD,WCzEJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxD,GACL0B,QAAQ1B,MAAMA,EAAMX,c","file":"static/js/main.6229801d.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { Quote } from '../types';\ntype Props = {\n    quote: Quote;\n};\n\nexport const DisplayQuote: FC<Props> = ({ quote }: { quote: Quote }) => {\n    return (\n        <div style={{ minHeight: '3vh' }}>\n            <p>Id: {quote._id}</p>\n            <p>Title: {quote.title}</p>\n        </div>\n    );\n};\n","import React, { FC, useState } from 'react';\nimport { Divider, Input, Form, Button, notification } from 'antd';\nimport { ApiResponse, Quote } from '../types';\nimport { DisplayQuote } from './display-quote';\n\nexport const CreateQuote: FC = () => {\n    const [quote, setQuote] = useState<Quote>({\n        _id: 'null',\n        title: 'empty',\n        _v: 0,\n    });\n\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    };\n\n    const handleSubmit = async ({ title }: { title: string }) => {\n        const result = await fetch('/quotes/create', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                title: title,\n            }),\n        });\n        const { message, data }: ApiResponse<Quote> = await result.json();\n        notification.success({ message });\n\n        setQuote(data);\n    };\n    const onFinish = (values: any) => {\n        const { title } = values;\n        handleSubmit({ title });\n    };\n\n    const onFinishFailed = (_: any) => {\n        notification.error({\n            message: 'Title is required! Please fill up the input',\n        });\n    };\n    return (\n        <>\n            <h3>This endpoint creates a quote</h3>\n\n            <Form\n                {...layout}\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n            >\n                <Form.Item\n                    style={{ color: 'white !important' }}\n                    label=\"Quote Title\"\n                    name=\"title\"\n                    rules={[\n                        {\n                            required: true,\n                            message: 'Please input title of quote!',\n                        },\n                    ]}\n                >\n                    <Input />\n                </Form.Item>\n                <Button type=\"primary\" htmlType=\"submit\">\n                    Submit\n                </Button>\n            </Form>\n            <Divider />\n            <div\n                style={{\n                    minHeight: '5vh',\n                    marginTop: '20px',\n                    paddingBottom: '20px',\n                }}\n            >\n                <h3>Response from API:</h3>\n\n                <DisplayQuote quote={quote} />\n            </div>\n        </>\n    );\n};\n","import React, { FC, useEffect, useState, useCallback } from 'react';\nimport { ApiResponse, Quote } from '../types';\nimport { Button, List, notification, Input, Form, Divider } from 'antd';\nimport { DisplayQuote } from './display-quote';\nconst layout = {\n    labelCol: { span: 8 },\n    wrapperCol: { span: 16 },\n};\nexport const GetQuoteDetail: FC = () => {\n    const [listOfId, setListOfId] = useState<string[]>([]);\n    const [quote, setQuote] = useState<Quote>({\n        _id: 'null',\n        title: 'empty',\n        _v: 0,\n    });\n    const handleSubmit = async ({ id }: { id: string }) => {\n        try {\n            const result = await fetch('/quotes/' + id, {\n                method: 'GET',\n                headers: { 'Content-Type': 'application/json' },\n            });\n            const { message, data }: ApiResponse<Quote> = await result.json();\n            notification.success({ message });\n            setQuote(data);\n        } catch (err) {\n            notification.error({ message: err.message });\n        }\n    };\n\n    const onFinish = (values: any) => {\n        const { id } = values;\n        handleSubmit({ id });\n    };\n\n    const onFinishFailed = (_: any) => {\n        notification.error({\n            message: 'ID is required! Please fill up the input',\n        });\n    };\n\n    useEffect(() => {\n        const getListOfID = async () => {\n            const result = await fetch('/quotes', {\n                method: 'GET',\n                headers: { 'Content-Type': 'application/json' },\n            });\n            const { message, data }: ApiResponse<Quote[]> = await result.json();\n            const list = data.map((x) => x._id);\n            setListOfId(list);\n        };\n        getListOfID();\n    }, []);\n    return (\n        <>\n            <h3>This endpoint returns a single quote from the api</h3>\n            <Form\n                {...layout}\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n            >\n                <Form.Item\n                    style={{ color: 'white !important' }}\n                    label=\"ID of Quote\"\n                    name=\"id\"\n                    rules={[\n                        {\n                            required: true,\n                            message: 'Please input ID of quote!',\n                        },\n                    ]}\n                >\n                    <Input />\n                </Form.Item>\n                <Button type=\"primary\" htmlType=\"submit\">\n                    Submit\n                </Button>\n            </Form>\n            <Divider />\n            <h3>Response from API:</h3>\n            <DisplayQuote quote={quote} />\n            <h3>Request any of the following IDs:</h3>\n            <Divider />\n            <div\n                style={{\n                    minHeight: '5vh',\n                    marginTop: '20px',\n                    paddingBottom: '20px',\n                }}\n            >\n                <div>\n                    {listOfId.length === 0 ? (\n                        <p>There is no quotes currently in the Database</p>\n                    ) : (\n                        <List>\n                            {listOfId.map((id: string, index: number) => {\n                                return (\n                                    <List.Item key={index}>\n                                        <p>Id: {id}</p>\n                                    </List.Item>\n                                );\n                            })}\n                        </List>\n                    )}\n                </div>\n            </div>\n        </>\n    );\n};\n","import React, { FC, useState, useEffect } from 'react';\nimport { Quote, ApiResponse } from '../types';\nimport { Button, List, notification } from 'antd';\nimport { DisplayQuote } from './display-quote';\n\nexport const GetQuoteList: FC = () => {\n    const [list, setList] = useState<Quote[]>([]);\n\n    const handleSubmit = async (\n        _: React.MouseEvent<HTMLElement, MouseEvent>\n    ) => {\n        const result = await fetch('/quotes', {\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json' },\n        });\n        const { message, data }: ApiResponse<Quote[]> = await result.json();\n        console.log(data);\n        notification.success({ message });\n        setList(data);\n    };\n\n    return (\n        <>\n            <h3>This endpoint returns a list of quotes from the api</h3>\n            <Button type=\"primary\" onClick={handleSubmit}>\n                Get List\n            </Button>\n            <div\n                style={{\n                    minHeight: '5vh',\n                    marginTop: '20px',\n                    paddingBottom: '20px',\n                }}\n            >\n                <h3>Response from API:</h3>\n                {list.length === 0 ? (\n                    <p>\n                        There is no quotes currently requested / currently in\n                        the database\n                    </p>\n                ) : (\n                    <List>\n                        {list.map((quote: Quote) => {\n                            return (\n                                <List.Item key={quote._id}>\n                                    <DisplayQuote quote={quote} />\n                                </List.Item>\n                            );\n                        })}\n                    </List>\n                )}\n            </div>\n        </>\n    );\n};\n","import React, { FC, useState, useEffect, useCallback } from 'react';\nimport { notification, List, Form, Button, Input, Divider } from 'antd';\nimport { ApiResponse, Quote } from '../types';\nimport { DisplayQuote } from './display-quote';\nimport { ValidateStatus } from 'antd/lib/form/FormItem';\nconst layout = {\n    labelCol: { span: 8 },\n    wrapperCol: { span: 16 },\n};\nexport const UpdateQuote: FC = () => {\n    const [list, setList] = useState<Quote[]>([]);\n\n    const onFinish = (values: any) => {\n        const { id, title } = values;\n        handleSubmit({ id, title });\n    };\n    const handleSubmit = async ({\n        id,\n        title,\n    }: {\n        id: string;\n        title: string;\n    }) => {\n        try {\n            const result = await fetch('/quotes/' + id, {\n                method: 'PUT',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    title: title,\n                }),\n            });\n            const { message }: ApiResponse<Quote> = await result.json();\n            notification.success({ message });\n            getListOfQuotes();\n        } catch (err) {\n            notification.error({ message: err.message });\n        }\n    };\n\n    const onFinishFailed = (errorInfo: any) => {\n        notification.error({\n            message: 'Check ID and Title are filled properly',\n        });\n    };\n\n    const getListOfQuotes = useCallback(async () => {\n        const result = await fetch('/quotes', {\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json' },\n        });\n        const { message, data }: ApiResponse<Quote[]> = await result.json();\n        setList(data);\n    }, []);\n\n    useEffect(() => {\n        getListOfQuotes();\n    }, [getListOfQuotes]);\n\n    return (\n        <>\n            <h3>This endpoint enables edit of each quote's title</h3>\n            <p>\n                Input the id of the quote and the new title you want to edit it\n                to\n            </p>\n            <Form\n                {...layout}\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n            >\n                <Form.Item\n                    style={{ color: 'white !important' }}\n                    label=\"ID of Quote\"\n                    name=\"id\"\n                    rules={[\n                        {\n                            required: true,\n                            message: 'Please input ID of quote!',\n                        },\n                    ]}\n                >\n                    <Input />\n                </Form.Item>\n                <Form.Item\n                    style={{ color: 'white !important' }}\n                    label=\"Quote Title\"\n                    name=\"title\"\n                    rules={[\n                        {\n                            required: true,\n                            message: 'Please input title of quote!',\n                        },\n                    ]}\n                >\n                    <Input />\n                </Form.Item>\n                <Button type=\"primary\" htmlType=\"submit\">\n                    Submit\n                </Button>\n            </Form>\n            <Divider />\n            <Button onClick={getListOfQuotes}> Refresh Endpoint</Button>\n            <div\n                style={{\n                    minHeight: '5vh',\n                    marginTop: '20px',\n                    paddingBottom: '20px',\n                }}\n            >\n                {list.length === 0 ? (\n                    <p>There is no quotes in the database</p>\n                ) : (\n                    <List>\n                        {list.map((quote: Quote) => {\n                            return (\n                                <List.Item key={quote._id}>\n                                    <DisplayQuote quote={quote} />\n                                </List.Item>\n                            );\n                        })}\n                    </List>\n                )}\n            </div>\n        </>\n    );\n};\n","import React, { FC, useState, useEffect, useCallback } from 'react';\nimport { Quote, ApiResponse } from '../types';\nimport { Button, List, notification } from 'antd';\nimport { DisplayQuote } from './display-quote';\n\nexport const DeleteQuote: FC = () => {\n    const [list, setList] = useState<Quote[]>([]);\n\n    const handleSubmit = async (\n        _: React.MouseEvent<HTMLElement, MouseEvent>\n    ) => {\n        const result = await fetch('/quotes', {\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json' },\n        });\n        const { message, data }: ApiResponse<Quote[]> = await result.json();\n        console.log(data);\n        notification.success({ message });\n        setList(data);\n    };\n\n    const handleDelete = async ({ id }: { id: string }) => {\n        try {\n            const result = await fetch('/quotes/' + id, {\n                method: 'DELETE',\n                headers: { 'Content-Type': 'application/json' },\n            });\n            const { message }: ApiResponse<Quote> = await result.json();\n            notification.success({ message });\n            getListOfQuotes();\n        } catch (err) {\n            notification.error({ message: err.message });\n        }\n    };\n\n    const getListOfQuotes = useCallback(async () => {\n        const result = await fetch('/quotes', {\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json' },\n        });\n        const { message, data }: ApiResponse<Quote[]> = await result.json();\n        setList(data);\n    }, []);\n\n    useEffect(() => {\n        getListOfQuotes();\n    }, [getListOfQuotes]);\n\n    return (\n        <>\n            <h3>This endpoint returns a list of quotes from the api</h3>\n\n            <div\n                style={{\n                    minHeight: '5vh',\n                    marginTop: '20px',\n                    paddingBottom: '20px',\n                }}\n            >\n                <h3>Response from API:</h3>\n                {list.length === 0 ? (\n                    <p>There is no quotes currently in the database</p>\n                ) : (\n                    <List>\n                        {list.map((quote: Quote) => {\n                            return (\n                                <List.Item key={quote._id}>\n                                    <div>\n                                        <DisplayQuote quote={quote} />\n                                        <Button\n                                            danger\n                                            onClick={(event) =>\n                                                handleDelete({ id: quote._id })\n                                            }\n                                        >\n                                            Delete!\n                                        </Button>\n                                    </div>\n                                </List.Item>\n                            );\n                        })}\n                    </List>\n                )}\n            </div>\n        </>\n    );\n};\n","import React, { FC, useState, useEffect } from 'react';\nimport './App.css';\nimport { Typography, Divider, Card } from 'antd';\nimport { CodepenCircleFilled } from '@ant-design/icons';\nimport {\n    CreateQuote,\n    GetQuoteList,\n    GetQuoteDetail,\n    UpdateQuote,\n    DeleteQuote,\n} from './components';\nimport Meta from 'antd/lib/card/Meta';\n\nconst App: FC = () => {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <br />\n                <div className=\"App-logo\">\n                    <CodepenCircleFilled style={{ fontSize: '20vh' }} />\n                </div>\n                <br />\n                CS3219 Task B<br></br>\n                Eugene Teu\n                <br></br>\n                Welcome to my API playground\n                <br />\n                Built with React and Antd\n            </header>\n\n            <div className=\"background\">\n                <h1>Information</h1>\n                <Divider />\n                <p>This api will return quotes</p>\n                <p>The structure of each Quote is as follows:</p>\n                <Card>\n                    <Meta title=\"Quote\"></Meta>\n                    <br />\n                    <p>Each Quote contains title and _id</p>\n                    <p>Each Card is uniquely identified by their _id</p>\n                    <p>\n                        _id is assigned automatically by the databse (mongodb\n                        Atlas)\n                    </p>\n                </Card>\n                <br />\n\n                <h1>Playground</h1>\n                <Divider />\n                <Card>\n                    <h2>Create Quotes</h2>\n                    <Divider />\n                    <div className=\"api-module\">\n                        <CreateQuote />\n                    </div>\n                </Card>\n                <Divider />\n                <Card>\n                    <h2>Get Quotes</h2>\n                    <Divider />\n                    <div className=\"api-module\">\n                        <GetQuoteList />\n                    </div>\n                </Card>\n                <Divider />\n                <Card>\n                    <h2>Get Quotes Detail</h2>\n                    <Divider />\n                    <div className=\"api-module\">\n                        <GetQuoteDetail />\n                    </div>\n                </Card>\n                <Divider />\n                <Card>\n                    <h2>Update Quote</h2>\n                    <Divider />\n                    <div className=\"api-module\">\n                        <UpdateQuote />\n                    </div>\n                </Card>\n                <Divider />\n                <Card>\n                    <h2>Delete Quotes</h2>\n                    <Divider />\n                    <div className=\"api-module\">\n                        <DeleteQuote />\n                    </div>\n                </Card>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}